import dimod
import json
import matplotlib.pyplot as plt
import networkx as nx

from pyqubo import Binary, Placeholder, Constraint
from dimod import SimulatedAnnealingSampler
from dimod.serialization.json import DimodEncoder

from qiskit_optimization import QuadraticProgram
from qiskit_optimization.converters import InequalityToEquality, QuadraticProgramToQubo, LinearInequalityToPenalty, LinearEqualityToPenalty, IntegerToBinary
from qiskit.circuit.library import TwoLocal
from qiskit.algorithms.optimizers import SPSA
from qiskit import Aer
from qiskit.algorithms import VQE
from qiskit.utils import QuantumInstance


x = []

for i in range(6):
    x.append(Binary(f'x_{i}'))
    
Q = 16*x[0] + 6*x[1] + 34*x[2] - x[3] - 76*x[4] + 87*x[5] + 23*x[0]*x[2] - 3*x[1]*x[2] - 76*x[0]*x[1] + 2*x[0]*x[3] + 123*x[4]*x[2] + 223*x[1]*x[5] + 34*x[1]*x[3] - 23*x[3]*x[4] - 623*x[5]*x[2] + 5*x[2]*x[3]

# defining a qubo dictionary

qubo = {('x_0', 'x_1'): -76.0, ('x_0', 'x_3'): 2.0, ('x_1', 'x_5'): 223.0, ('x_0', 'x_0'): 16.0, ('x_2', 'x_3'): 5.0, ('x_2', 'x_2'): 34.0, ('x_2', 'x_5'): -623.0, ('x_0', 'x_2'): 23.0, ('x_1', 'x_2'): -3.0, ('x_2', 'x_4'): 123.0, ('x_3', 'x_4'): -23.0, ('x_5', 'x_5'): 87.0, ('x_1', 'x_3'): 34.0, ('x_4', 'x_4'): -76.0, ('x_3', 'x_3'): -1.0, ('x_1', 'x_1'): 6.0}

M = 5
s_0, s_1 = Binary('s_0'), Binary('s_1')

# defining the constraint
const_1 = 0

for i in range(6):
    const_1 +=x[i]
    
const_1 += -s_0 - 2*s_1 - 2
    
Q += Constraint(const_1**2, label='const_1')

# constraint 2
# defining the strength of the constraint as a placeholder

P = Placeholder('P')

const_2 = 0

for i in range(5):
    const_2 += x[i]*x[i+1]
    
Q += Constraint(const_2**2, label='const_2')

# compiling the system with the qubo formulation
model = Q.compile()
qubo, offset = model.to_qubo(feed_dict={'P': 8})

print('The qubo is:', qubo)
print('\nThe offset is:', offset)

# visualizing the graph problem

bqm = dimod.BinaryQuadraticModel.from_qubo(qubo,offset)

G = dimod.to_networkx_graph(bqm)
plt.figure(figsize=(6, 6))
nx.draw(G, node_size=200)
plt.show()


solution = dimod.SimulatedAnnealingSampler().sample_qubo(qubo)

print('The varibales solution is:', solution.first.sample)
print('\nThe energy of the system is:', solution.first.energy)
